def execute(program, input)
  p = {}
  
  for i in 0..program.size
    p[i] = program[i]
  end
  
  ic = 0
  a = []
  x = 0

  while p[ic] != 99 do
    i = p[ic]
    
    puts "\nic: #{ic}, i: #{i}, x: #{x}, a: #{a.inspect}"
    op = i % 100
    
    def lookup(p, ic, i, x, n)
      m = (i / (10 ** (n + 1))) % 10
      y = p[ic + n] || 0
      l = "jkl"
      r = 0
      if m == 0
        r = p[y] || 0
        puts " #{l[n - 1]} = p[#{y}] (#{r})"
      elsif m == 1
        r = y
        puts " #{l[n - 1]} = #{r}"
      elsif m == 2
        r = p[x + y] || 0
        puts " #{l[n - 1]} = p[#{y} + #{x} (#{x + y})] (#{r})"        
      end
      
      r
    end
    
    case op
    when 1
      j = lookup(p, ic, i, x, 1)
      k = lookup(p, ic, i, x, 2)
      l = p[ic + 3]
      
      puts "#{ic}: #{p[ic]},#{p[ic+1]},#{p[ic+2]},#{p[ic+3]}: j = #{j}, k = #{k}, l = #{l}"
      puts "> ST *#{l}, #{j} + #{k} (#{j + k})"
      
      p[l] = j + k
      ic += 4
      
    when 2
      j = lookup(p, ic, i, x, 1)
      k = lookup(p, ic, i, x, 2)
      l = p[ic + 3]
      
      puts "#{ic}: #{p[ic]},#{p[ic+1]},#{p[ic+2]},#{p[ic+3]}: j = #{j}, k = #{k}, l = #{l}"
      puts "> ST *#{l}, #{j} * #{k} (#{j * k})"
      
      p[l] = j * k
      ic += 4
      
    when 3
      j = p[ic + 1]
      case (i / 100) % 10
      when 2
        j = p[ic + 1] + x
      end
      
      puts "#{ic}: #{p[ic]},#{p[ic+1]}: j = #{j}"
      puts "> STA *#{j}, #{input[0]}"
      
      p[j] = input.shift
      ic += 2
      
    when 4
      j = lookup(p, ic, i, x, 1)
      
      puts "#{ic}: #{p[ic]},#{p[ic+1]}: j = #{j}"

      a << j

      puts "> LDA #{j} (#{a.inspect})"

      ic += 2
      
    when 5
      j = lookup(p, ic, i, x, 1)
      k = lookup(p, ic, i, x, 2)
      
      puts "#{ic}: #{p[ic]},#{p[ic+1]},#{p[ic+2]}: j = #{j}, k = #{k}"
      puts " > JNZ #{j}, #{k}"
      
      if j != 0 
        ic = k
      else
        ic += 3
      end
      
    when 6
      j = lookup(p, ic, i, x, 1)
      k = lookup(p, ic, i, x, 2)
      
      puts "#{ic}: #{p[ic]},#{p[ic+1]},#{p[ic+2]}: j = #{j}, k = #{k}"
      puts "> JZ #{j}, #{k}"
      
      if j == 0 
        ic = k
      else
        ic += 3
      end
      
    when 7
      j = lookup(p, ic, i, x, 1)
      k = lookup(p, ic, i, x, 2)
      l = p[ic + 3]
      
      puts "#{ic}: #{p[ic]},#{p[ic+1]},#{p[ic+2]},#{p[ic+3]}: j = #{j}, k = #{k}, l = #{l}"
      puts "> ST *#{l}, #{j} < #{k} (#{j < k ? 1 : 0})"

      p[l] = j < k ? 1 : 0
      ic += 4
      
    when 8
      j = lookup(p, ic, i, x, 1)
      k = lookup(p, ic, i, x, 2)
      l = p[ic + 3]
      
      puts "#{ic}: #{p[ic]},#{p[ic+1]},#{p[ic+2]},#{p[ic+3]}: j = #{j}, k = #{k}, l = #{l}"
      puts "> ST *#{l}, #{j} == #{k} (#{j == k ? 1 : 0})"

      p[l] = j == k ? 1 : 0
      ic += 4
      
    when 9
      j = lookup(p, ic, i, x, 1)
      
      puts "#{ic}: #{p[ic]},#{p[ic+1]}: j = #{j}"
      x += j
      ic += 2

      puts "> X +#{j} (#{x})"
      
    when 99
      return a
      
    else
      puts "unknown instruction: #{i}"
      return nil
      
    end  
  end
  
  a
end

def run_series(program, settings)
  i = 0
  settings.each do |s|
    p = Array.new(program)
    i = execute(p, [s, i])
  end
  i
end

puts ">>> phase one"

# p1 = [109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99]
# o = execute(p1, [])
# puts "***** test 1 output #{o}"
#
# p2 = [1102,34915192,34915192,7,4,7,99,0]
# o = execute(p2, [])
# puts "***** test 2 output #{o}"
#
# p3 = [104,1125899906842624,99]
# o = execute(p3, [])
# puts "***** test 3 output #{o}"

p = [1102,34463338,34463338,63,1007,63,34463338,63,1005,63,53,1101,0,3,1000,109,988,209,12,9,1000,209,6,209,3,203,0,1008,1000,1,63,1005,63,65,1008,1000,2,63,1005,63,902,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99,4,17,104,0,99,0,0,1102,32,1,1019,1101,0,500,1023,1101,0,636,1025,1102,36,1,1010,1101,0,29,1013,1102,864,1,1029,1102,21,1,1000,1102,1,507,1022,1102,1,28,1011,1102,38,1,1008,1101,0,35,1004,1101,25,0,1018,1102,24,1,1005,1102,30,1,1009,1102,1,869,1028,1101,0,37,1007,1102,1,23,1017,1102,1,20,1015,1102,1,22,1003,1101,0,39,1001,1102,1,31,1012,1101,701,0,1026,1101,0,641,1024,1101,0,34,1016,1102,1,0,1020,1102,698,1,1027,1102,33,1,1002,1102,26,1,1006,1101,0,1,1021,1101,0,27,1014,109,12,21101,40,0,0,1008,1012,40,63,1005,63,203,4,187,1105,1,207,1001,64,1,64,1002,64,2,64,109,-11,1207,7,37,63,1005,63,223,1105,1,229,4,213,1001,64,1,64,1002,64,2,64,109,14,1206,5,247,4,235,1001,64,1,64,1105,1,247,1002,64,2,64,109,-2,1207,-4,31,63,1005,63,269,4,253,1001,64,1,64,1105,1,269,1002,64,2,64,109,-6,1208,-5,35,63,1005,63,289,1001,64,1,64,1106,0,291,4,275,1002,64,2,64,109,9,21108,41,39,-1,1005,1015,311,1001,64,1,64,1105,1,313,4,297,1002,64,2,64,109,-5,2101,0,-9,63,1008,63,33,63,1005,63,339,4,319,1001,64,1,64,1106,0,339,1002,64,2,64,1205,10,351,4,343,1106,0,355,1001,64,1,64,1002,64,2,64,109,-18,2108,35,9,63,1005,63,375,1001,64,1,64,1105,1,377,4,361,1002,64,2,64,109,18,1205,9,389,1105,1,395,4,383,1001,64,1,64,1002,64,2,64,109,7,21107,42,41,-8,1005,1010,415,1001,64,1,64,1106,0,417,4,401,1002,64,2,64,109,-12,2102,1,0,63,1008,63,29,63,1005,63,437,1106,0,443,4,423,1001,64,1,64,1002,64,2,64,109,3,1208,0,30,63,1005,63,461,4,449,1105,1,465,1001,64,1,64,1002,64,2,64,109,5,1202,-5,1,63,1008,63,31,63,1005,63,489,1001,64,1,64,1106,0,491,4,471,1002,64,2,64,109,15,2105,1,-6,1001,64,1,64,1106,0,509,4,497,1002,64,2,64,109,-10,1206,2,525,1001,64,1,64,1106,0,527,4,515,1002,64,2,64,109,-18,1202,0,1,63,1008,63,39,63,1005,63,553,4,533,1001,64,1,64,1106,0,553,1002,64,2,64,109,1,2107,21,1,63,1005,63,571,4,559,1105,1,575,1001,64,1,64,1002,64,2,64,109,7,2102,1,-8,63,1008,63,39,63,1005,63,601,4,581,1001,64,1,64,1105,1,601,1002,64,2,64,109,2,1201,-7,0,63,1008,63,35,63,1005,63,623,4,607,1106,0,627,1001,64,1,64,1002,64,2,64,109,20,2105,1,-7,4,633,1106,0,645,1001,64,1,64,1002,64,2,64,109,-16,21107,43,44,-4,1005,1011,663,4,651,1105,1,667,1001,64,1,64,1002,64,2,64,109,-11,2107,36,0,63,1005,63,687,1001,64,1,64,1106,0,689,4,673,1002,64,2,64,109,19,2106,0,4,1106,0,707,4,695,1001,64,1,64,1002,64,2,64,109,-14,21108,44,44,6,1005,1015,725,4,713,1105,1,729,1001,64,1,64,1002,64,2,64,109,1,1201,-6,0,63,1008,63,36,63,1005,63,749,1106,0,755,4,735,1001,64,1,64,1002,64,2,64,109,-1,21101,45,0,10,1008,1019,42,63,1005,63,775,1105,1,781,4,761,1001,64,1,64,1002,64,2,64,109,16,21102,46,1,-7,1008,1018,44,63,1005,63,801,1105,1,807,4,787,1001,64,1,64,1002,64,2,64,109,-3,21102,47,1,-4,1008,1018,47,63,1005,63,833,4,813,1001,64,1,64,1105,1,833,1002,64,2,64,109,-14,2108,38,0,63,1005,63,851,4,839,1105,1,855,1001,64,1,64,1002,64,2,64,109,17,2106,0,3,4,861,1106,0,873,1001,64,1,64,1002,64,2,64,109,-31,2101,0,10,63,1008,63,36,63,1005,63,897,1001,64,1,64,1106,0,899,4,879,4,64,99,21101,0,27,1,21101,0,913,0,1106,0,920,21201,1,53612,1,204,1,99,109,3,1207,-2,3,63,1005,63,962,21201,-2,-1,1,21102,940,1,0,1106,0,920,21202,1,1,-1,21201,-2,-3,1,21101,955,0,0,1106,0,920,22201,1,-1,-2,1105,1,966,21201,-2,0,-2,109,-3,2106,0,0]
o = execute(p, [1])
puts "***** output #{o}"

puts ">>> phase two"
